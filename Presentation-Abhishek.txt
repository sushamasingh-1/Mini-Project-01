Q.) What is an Object-Oriented
Ans:- OOP stands for Object-Oriented Programming.

Procedural programming is about writing procedures or methods that perform operations 
on the data, while object-oriented programming is about creating objects that contain both data and methods.
Object-oriented programming (OOP) is a computer programming model that organizes software design around data, 
or objects, rather than functions and logic. An object can be defined as a data field that has unique attributes and behavior.

OOP focuses on the objects that developers want to manipulate rather than the logic required to manipulate them. 
This approach to programming is well-suited for programs that are large, complex and actively updated or maintained. 
This includes programs for manufacturing and design, as well as mobile applications; for example, OOP can be used 
for manufacturing system simulation software.

The organization of an object-oriented program also makes the method beneficial to collaborative development, 
where projects are divided into groups. Additional benefits of OOP include code reusability, scalability and efficiency.

Object-oriented programming has several advantages over procedural programming:

OOP is faster and easier to execute
OOP provides a clear structure for the programs
OOP helps to keep the Java code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
OOP makes it possible to create full reusable applications with less code and shorter development time

Q.) Difference between class and object?
Ans:- 	OBJECT
	Object is an instance of a class.		
	Object is a real world entity such as pen, laptop, mobile, bed, keyboard, mouse, chair etc. 
	Object is a physical entity.
	Object is created through new keyword mainly e.g.
Student s1=new Student();	

	Object is created many times as per requirement. 
	Object allocates memory when it is created. 

		CLASS
	Class is a blueprint or template from which objects are created.	
	Class is a group of similar objects.	
	Class is a logical entity. Class is declared using class keyword e.g.class Student{}	
	Class is declared once.	
	Class doesn't allocated memory when it is created.
	


	There are many ways to create object in java such as new keyword, newInstance() method, clone() method,
	factory method and deserialization.	There is only one way to define class in java using class keyword.
	Let's see some real life example of class and object in java to understand the differe


Q.) What are OOPS concepts?
ANS:- 
	The four basics of object-oriented programming
Object-oriented programming has four basic concepts: encapsulation, abstraction, inheritance, and polymorphism. Even if these concepts seem incredibly complex, understanding the general framework of how they work will help you understand the basics of an OOP computer program. Below, we outline these four basic principles and what they entail:

Encapsulation
Abstraction
Inheritance
Polymorphism
1. Encapsulation
The word, “encapsulate,” means to enclose something. Just like a pill "encapsulates" or contains
 the medication inside of its coating, the principle of encapsulation works in a similar way in 
OOP: by forming a protective barrier around the information contained within a class from the rest of the code.

In OOP, we encapsulate by binding the data and functions which operate on that data into a single 
unit, the class. By doing so, we can hide private details of a class from the outside world and 



only expose functionality that is important for interfacing with it. When a class does not allow 
calling code access to its private data directly, we say that it is well encapsulated.

Example: Elaborating on the person class example from earlier, we might have private data in the 


class, such as "socialSecurityNumber," that should not be exposed to other objects in the program. 

By encapsulating this data member as a private variable in the class, outside code would not have 
direct access to it, and it would remain safe within that person’s object.

If a method is written in the person class to perform, say, a bank transaction called 
"bankTransaction()," that function could then access the "socialSecurityNumber" variable
 as necessary. The person’s private data would be well encapsulated in such a class.

2. Abstraction
Often, it’s easier to reason and design a program when you can separate the interface of 
a class from its implementation, and focus on the interface. This is akin to treating a system 
as a “black box,” where it’s not important to understand the gory inner workings in order to 
reap the benefits of using it.

This process is called “abstraction” in OOP, because we are abstracting away the gory 
implementation details of a class and only presenting a clean and easy-to-use interface 
via the class’ member functions. Carefully used, abstraction helps isolate the impact of 
changes made to the code, so that if something goes wrong, the change will only affect the 
implementation details of a class and not the outside code.

Example: Think of a stereo system as an object with a complex logic board on the inside. 
It has buttons on the outside to allow for interaction with the object. When you press 
any of the buttons, you're not thinking about what happens on the inside because you 
can't see it. Even though you can't see the logic board completing these functions as 
a result of pressing a button, it's still performing them., albeit hidden to you.

This is the concept of abstraction, which is incredibly useful in all areas of 
engineering and also applied to great effect in object-oriented programming.

Example: In OOP, we might have a class defined to represent the human body. 
One might define some functions as part of its publicly facing interface such 
as “walk()” or “eatFood().” Calling code could call these functions and remain 
completely oblivious to the complex inner workings of the human body and its necessary 
functions to perform the act of walking or eating. These details are completely hidden 
in the implementation of the walk() and eatFood() body functions and are, therefore, us 
abstracted away from the end user. In these cases, it’s not important for calling code 
to understand how the brain coordinates walking or how the stomach manages digesting the 
food, but rather simply that a human walked or ate.

3. Inheritance
Object-oriented languages that support classes almost always support the notion of 
“inheritance.” Classes can be organized into hierarchies, where a class might have one 
or more parent or child classes. If a class has a parent class, we say it is derived or 
inherited from the parent class and it represents an “IS-A” type relationship. That is 
to say, the child class “IS-A” type of the parent class.

Therefore, if a class inherits from another class, it automatically obtains a lot of 
the same functionality and properties from that class and can be extended to contain 
separate code and data. A nice feature of inheritance is that it often leads to good 
code reuse since a parent class’ functions don’t need to be re-defined in any of its child classes.

Consider two classes: one being the superclass—or parent—and the other being the subclass—or 
child. The child class will inherit the properties of the parent class, possibly modifying or 
extending its behavior. Programmers applying the technique of inheritance arrange these classes 
into what is called an “IS-A” type of relationship.

Example: For instance, in the animal world, an insect could be represented by an Insect superclass. 
All insects share similar properties, such as having six legs and an exoskeleton. Subclasses might 
be defined for grasshoppers and ants. Because they inherit or are derived from the Insect class, 
they automatically share all insect properties.

4. Polymorphism
In OOP, polymorphism allows for the uniform treatment of classes in a hierarchy. Therefore, 
calling code only needs to be written to handle objects from the root of the hierarchy, and
 any object instantiated by any child class in the hierarchy will be handled in the same way.

Because derived objects share the same interface as their parents, the calling code can call 
any function in that class’ interface. At run-time, the appropriate function will be called 
depending on the type of object passed leading to possibly different behaviors.

Example: Suppose we have a class called, “Animal” and two child classes, “Cat,” and “Dog.”
 If the Animal class has a method to make a noise, called, “makeNoise,” then, we can override 
the "makeNoise" function that is inherited by the sub-classes, "Cat" and "Dog," to be “meow” 
and “bark,” respectively. Another function can, then, be written that accepts any Animal object
 as a parameter and invokes its "makeNoise" member function. The noise will be different: either 
a “meow” or a “bark” depending on the type of animal object that was actually passed to the function.


Q.) Write steps to create a project, package, class and interface in the eclipse
ANS:- Step-1 Click on File Upper left corner
	Step-2 then go to new and click New Java Project
	Step-3 Give name to your project. 
	Step-4 Double click on your new java project to open it. 
	Step-5 Right click on src and go to new package then give your pacakge a name.
	Step-6 right click on your package and goto new class and give class name.