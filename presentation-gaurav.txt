Q.    What is an object-oriented programming language?
Ans- Object-oriented programming is a computer programming model that organizes software design around data, or objects, rather than functions and logic. 

           OOP focuses on the objects that developers want to manipulate rather than the logic required to manipulate them. This approach to programming is well-suited for programs that are large, complex and actively updated or maintained. This includes programs for manufacturing and design, as well as mobile applications; for example, OOP can be used for manufacturing system simulation software.

           The organization of an object-oriented program also makes the method beneficial to collaborative development, where projects are divided into groups. Additional benefits of OOP include code reusability, scalability and efficiency.


Benifits of oops are as follows:

Modularity- Encapsulation enables objects to be self-contained, making troubleshooting and collaborative development easier.

Reusability -Code can be reused through inheritance, meaning a team does not have to write the same code multiple times.

Productivity- Users can construct new programs quicker through the use of multiple libraries and reusable code.

Easily upgradable and scalable- Users can implement system functionalities independently.

Security -Using encapsulation and abstraction, complex code is hidden, software maintenance is easier and internet protocols are protected.

Flexibility- Polymorphism enables a single function to adapt to the class it is placed in. Different objects can also pass through the same interface.


Q.Difference between class and object?
Ans: Class

 Class is the blueprint of an object. It is used to declare and create objects.

 No memory is allocated when a class is declared.

 A class is a group of similar objects.

 Class is a logical entity.

 Class can only be declared once.

 Object

 Object is an instance of class.

 Memory is allocated as soon as an object is created.

 Object is a real-world entity such as book, car, etc.

 Object is a physical entity.

 Object can be created many times as per requirement


Q:What are OOPS concepts?
Ans: There are four types of oops concept.

1. Encapsulation
The word “encapsulate” means to enclose something. Just like a pill "encapsulates" or contains the medication inside its coating, encapsulation works in a similar way in OOP: by forming a protective barrier around the information contained within a class from the rest of the code.

In OOP, we encapsulate by binding the data and functions that operate on that data into a single unit known as the class. This hides private details of a class from the outside world and only exposes functionality important for interfacing with it. When a class does not allow calling code access to its private data directly, we say that it is well encapsulated.


2. Abstraction
Often, it’s easier to reason and design a program when you can separate the interface of a class from its implementation, and focus on the interface. This is akin to treating a system as a “black box,” where it’s not important to understand the gory inner workings in order to reap the benefits of using it.

This process is called “abstraction” in OOP because we are abstracting away the implementation details of a class and only presenting a clean, easy-to-use interface via the class’s member functions. Carefully used, abstraction helps isolate the impact of changes made to the code so that if something goes wrong, the change will only affect the implementation details of a class and not the outside code.

Example
Think of a stereo system as an object with a complex logic board on the inside. It has buttons on the outside to allow for interaction with the object. When you press a button, you're not thinking about what happens on the inside because you can't see it. Even though you can't see the logic board completing these functions as a result of pressing a button, it's still performing them.

This is the concept of abstraction, which is incredibly useful in all areas of engineering and also applied to great effect in object-oriented programming.


3. Inheritance
Object-oriented languages that support classes almost always support the notion of “inheritance.” Classes can be organized into hierarchies where a class might have one or more parent or child classes. If a class has a parent class, we say it is derived or inherited from the parent class and it represents an “IS-A” type relationship. That is to say, the child class “IS-A” type of the parent class.

Therefore, if a class inherits from another class, it automatically obtains much of the same functionality and properties from that class and can be extended to contain separate code and data. A nice feature of inheritance is that it often leads to good code reuse since a parent class’s functions don’t need to be re-defined in any of its child classes.

Consider two classes: one being the superclass—or parent—and the other being the subclass—or child. The child class will inherit the properties of the parent class, possibly modifying or extending its behavior. Programmers applying the technique of inheritance arrange these classes into what is called an “IS-A” type of relationship.


4. Polymorphism
In OOP, polymorphism allows for the uniform treatment of classes in a hierarchy. Therefore, calling code only needs to be written to handle objects from the root of the hierarchy, and any object instantiated by any child class in the hierarchy will be handled in the same way.

Because derived objects share the same interface as their parents, the calling code can call any function in that class’ interface. At run-time, the appropriate function will be called depending on the type of object passed leading to possibly different behaviors.


Q: Write steps to create a project, package, class and interface in the eclipse
Ans: step1:-select on file in the eclipse
         step2:-select new and then select new java project and name it
         step3:-select your new java project and open it
         step4:-right click on src and select new package and name it
         step5:-right click on new package and select new class and name it